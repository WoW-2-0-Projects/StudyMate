// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StudyMate.Persistence.DataContexts;

#nullable disable

namespace StudyMate.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StudyMate.Domain.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("Answers");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("StudyMate.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("QuestionContent")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("StudyMate.Domain.Entities.MultipleChoiceQuestionAnswer", b =>
                {
                    b.HasBaseType("StudyMate.Domain.Entities.Answer");

                    b.Property<List<string>>("Answers")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.ToTable("MultipleChoiceAnswers");
                });

            modelBuilder.Entity("StudyMate.Domain.Entities.TrueFalseQuestionAnswer", b =>
                {
                    b.HasBaseType("StudyMate.Domain.Entities.Answer");

                    b.Property<bool>("Answer")
                        .HasColumnType("boolean");

                    b.ToTable("TrueFalseAnswers");
                });

            modelBuilder.Entity("StudyMate.Domain.Entities.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("StudyMate.Domain.Entities.Question");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("StudyMate.Domain.Entities.TrueFalseQuestion", b =>
                {
                    b.HasBaseType("StudyMate.Domain.Entities.Question");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("StudyMate.Domain.Entities.Answer", b =>
                {
                    b.HasOne("StudyMate.Domain.Entities.Question", "Question")
                        .WithOne("Answer")
                        .HasForeignKey("StudyMate.Domain.Entities.Answer", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("StudyMate.Domain.Entities.MultipleChoiceQuestionAnswer", b =>
                {
                    b.HasOne("StudyMate.Domain.Entities.Answer", null)
                        .WithOne()
                        .HasForeignKey("StudyMate.Domain.Entities.MultipleChoiceQuestionAnswer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudyMate.Domain.Entities.TrueFalseQuestionAnswer", b =>
                {
                    b.HasOne("StudyMate.Domain.Entities.Answer", null)
                        .WithOne()
                        .HasForeignKey("StudyMate.Domain.Entities.TrueFalseQuestionAnswer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudyMate.Domain.Entities.Question", b =>
                {
                    b.Navigation("Answer")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
